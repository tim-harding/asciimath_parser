use crate::error::AmError;
use std::convert::TryFrom;

#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub enum Symbol<'a> {
    TextVar(&'a str),

    Alpha,
    Beta,
    Gamma,
    GammaBig,
    Delta,
    BigDelta,
    Epsilon,
    EpsilonVar,
    Zeta,
    Eta,
    Theta,
    ThetaBig,
    ThetaVar,
    Iota,
    Kappa,
    Lambda,
    LambdaBig,
    Mu,
    Nu,
    Xi,
    XiBig,
    Pi,
    PiBig,
    Rho,
    Sigma,
    SigmaBig,
    Tau,
    Upsilon,
    Phi,
    PhiBig,
    PhiVar,
    Chi,
    Psi,
    PsiBig,
    Omega,
    OmegaBig,

    Up,
    Down,
    Left,
    LeftBig,
    Right,
    RightBig,
    RightTail,
    RightDouble,
    RightDoubleTail,
    LeftRight,
    LeftRightBig,
    To,
    MapsTo,
}

impl<'a> Into<&'a str> for Symbol<'a> {
    fn into(self) -> &'a str {
        use Symbol::*;

        match self {
            TextVar(s) => s,

            Alpha => "alpha",
            Beta => "beta",
            Gamma => "gamma",
            GammaBig => "Gamma",
            Delta => "delta",
            BigDelta => "Delta",
            Epsilon => "epsilon",
            EpsilonVar => "varepsilon",
            Zeta => "zeta",
            Eta => "eta",
            Theta => "theta",
            ThetaBig => "Theta",
            ThetaVar => "vartheta",
            Iota => "iota",
            Kappa => "kappa",
            Lambda => "lambda",
            LambdaBig => "Lambda",
            Mu => "mu",
            Nu => "nu",
            Xi => "xi",
            XiBig => "Xi",
            Pi => "pi",
            PiBig => "Pi",
            Rho => "rho",
            Sigma => "sigma",
            SigmaBig => "Sigma",
            Tau => "tau",
            Upsilon => "upsilon",
            Phi => "phi",
            PhiBig => "Phi",
            PhiVar => "varphi",
            Chi => "chi",
            Psi => "psi",
            PsiBig => "Psi",
            Omega => "omega",
            OmegaBig => "Omega",

            Up => "uarr",
            Down => "darr",
            Left => "larr",
            LeftBig => "lArr",
            Right => "rarr",
            RightBig => "rArr",
            RightTail => ">->",
            RightDouble => "->>",
            RightDoubleTail => ">->>",
            LeftRight => "harr",
            LeftRightBig => "hArr",
            To => "->",
            MapsTo => "|->",
        }
    }
}
